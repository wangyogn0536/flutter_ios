// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:agent_app_vpn/data/area_list_bean_entity.dart';
import 'package:agent_app_vpn/data/city_node_bean_entity.dart';
import 'package:agent_app_vpn/data/coupon_list_bean_entity.dart';
import 'package:agent_app_vpn/data/order_member_list_bean_entity.dart';
import 'package:agent_app_vpn/data/product_node_list_entity.dart';
import 'package:agent_app_vpn/data/product_province_list_bean_entity.dart';
import 'package:agent_app_vpn/data/product_type_bean_entity.dart';
import 'package:agent_app_vpn/data/server_info_bean_entity.dart';
import 'package:agent_app_vpn/data/server_list_bean_entity.dart';
import 'package:agent_app_vpn/data/static_node_list_entity.dart';
import 'package:agent_app_vpn/data/usable_coupon_bean_entity.dart';
import 'package:agent_app_vpn/data/vip_list_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(
    Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AreaListBeanEntity>[] is M) {
      return data
          .map<AreaListBeanEntity>(
              (Map<String, dynamic> e) => AreaListBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<AreaListBeanData>[] is M) {
      return data
          .map<AreaListBeanData>(
              (Map<String, dynamic> e) => AreaListBeanData.fromJson(e))
          .toList() as M;
    }
    if (<AreaListBeanDataAreas>[] is M) {
      return data
          .map<AreaListBeanDataAreas>(
              (Map<String, dynamic> e) => AreaListBeanDataAreas.fromJson(e))
          .toList() as M;
    }
    if (<CityNodeBeanEntity>[] is M) {
      return data
          .map<CityNodeBeanEntity>(
              (Map<String, dynamic> e) => CityNodeBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<CityNodeBeanData>[] is M) {
      return data
          .map<CityNodeBeanData>(
              (Map<String, dynamic> e) => CityNodeBeanData.fromJson(e))
          .toList() as M;
    }
    if (<CouponListBeanEntity>[] is M) {
      return data
          .map<CouponListBeanEntity>(
              (Map<String, dynamic> e) => CouponListBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<CouponListBeanData>[] is M) {
      return data
          .map<CouponListBeanData>(
              (Map<String, dynamic> e) => CouponListBeanData.fromJson(e))
          .toList() as M;
    }
    if (<CouponListBeanDataData>[] is M) {
      return data
          .map<CouponListBeanDataData>(
              (Map<String, dynamic> e) => CouponListBeanDataData.fromJson(e))
          .toList() as M;
    }
    if (<OrderMemberListBeanEntity>[] is M) {
      return data
          .map<OrderMemberListBeanEntity>(
              (Map<String, dynamic> e) => OrderMemberListBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderMemberListBeanData>[] is M) {
      return data
          .map<OrderMemberListBeanData>(
              (Map<String, dynamic> e) => OrderMemberListBeanData.fromJson(e))
          .toList() as M;
    }
    if (<OrderMemberListBeanDataList>[] is M) {
      return data
          .map<OrderMemberListBeanDataList>((Map<String, dynamic> e) =>
              OrderMemberListBeanDataList.fromJson(e))
          .toList() as M;
    }
    if (<OrderMemberListBeanDataListData>[] is M) {
      return data
          .map<OrderMemberListBeanDataListData>((Map<String, dynamic> e) =>
              OrderMemberListBeanDataListData.fromJson(e))
          .toList() as M;
    }
    if (<ProductNodeListEntity>[] is M) {
      return data
          .map<ProductNodeListEntity>(
              (Map<String, dynamic> e) => ProductNodeListEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProductNodeListData>[] is M) {
      return data
          .map<ProductNodeListData>(
              (Map<String, dynamic> e) => ProductNodeListData.fromJson(e))
          .toList() as M;
    }
    if (<ProductNodeListDataNode>[] is M) {
      return data
          .map<ProductNodeListDataNode>(
              (Map<String, dynamic> e) => ProductNodeListDataNode.fromJson(e))
          .toList() as M;
    }
    if (<ProductNodeListDataNodeChilder>[] is M) {
      return data
          .map<ProductNodeListDataNodeChilder>((Map<String, dynamic> e) =>
              ProductNodeListDataNodeChilder.fromJson(e))
          .toList() as M;
    }
    if (<ProductProvinceListBeanEntity>[] is M) {
      return data
          .map<ProductProvinceListBeanEntity>((Map<String, dynamic> e) =>
              ProductProvinceListBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProductProvinceListBeanData>[] is M) {
      return data
          .map<ProductProvinceListBeanData>((Map<String, dynamic> e) =>
              ProductProvinceListBeanData.fromJson(e))
          .toList() as M;
    }
    if (<ProductProvinceListBeanDataAreas>[] is M) {
      return data
          .map<ProductProvinceListBeanDataAreas>((Map<String, dynamic> e) =>
              ProductProvinceListBeanDataAreas.fromJson(e))
          .toList() as M;
    }
    if (<ProductTypeBeanEntity>[] is M) {
      return data
          .map<ProductTypeBeanEntity>(
              (Map<String, dynamic> e) => ProductTypeBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProductTypeBeanData>[] is M) {
      return data
          .map<ProductTypeBeanData>(
              (Map<String, dynamic> e) => ProductTypeBeanData.fromJson(e))
          .toList() as M;
    }
    if (<ProductTypeBeanDataTypes>[] is M) {
      return data
          .map<ProductTypeBeanDataTypes>(
              (Map<String, dynamic> e) => ProductTypeBeanDataTypes.fromJson(e))
          .toList() as M;
    }
    if (<ProductTypeBeanDataTypesUrl>[] is M) {
      return data
          .map<ProductTypeBeanDataTypesUrl>((Map<String, dynamic> e) =>
              ProductTypeBeanDataTypesUrl.fromJson(e))
          .toList() as M;
    }
    if (<ServerInfoBeanEntity>[] is M) {
      return data
          .map<ServerInfoBeanEntity>(
              (Map<String, dynamic> e) => ServerInfoBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<ServerInfoBeanData>[] is M) {
      return data
          .map<ServerInfoBeanData>(
              (Map<String, dynamic> e) => ServerInfoBeanData.fromJson(e))
          .toList() as M;
    }
    if (<ServerListBeanEntity>[] is M) {
      return data
          .map<ServerListBeanEntity>(
              (Map<String, dynamic> e) => ServerListBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<ServerListBeanData>[] is M) {
      return data
          .map<ServerListBeanData>(
              (Map<String, dynamic> e) => ServerListBeanData.fromJson(e))
          .toList() as M;
    }
    if (<ServerListBeanDataData>[] is M) {
      return data
          .map<ServerListBeanDataData>(
              (Map<String, dynamic> e) => ServerListBeanDataData.fromJson(e))
          .toList() as M;
    }
    if (<StaticNodeListEntity>[] is M) {
      return data
          .map<StaticNodeListEntity>(
              (Map<String, dynamic> e) => StaticNodeListEntity.fromJson(e))
          .toList() as M;
    }
    if (<StaticNodeListData>[] is M) {
      return data
          .map<StaticNodeListData>(
              (Map<String, dynamic> e) => StaticNodeListData.fromJson(e))
          .toList() as M;
    }
    if (<StaticNodeListDataNode>[] is M) {
      return data
          .map<StaticNodeListDataNode>(
              (Map<String, dynamic> e) => StaticNodeListDataNode.fromJson(e))
          .toList() as M;
    }
    if (<StaticNodeListDataNodeChilder>[] is M) {
      return data
          .map<StaticNodeListDataNodeChilder>((Map<String, dynamic> e) =>
              StaticNodeListDataNodeChilder.fromJson(e))
          .toList() as M;
    }
    if (<UsableCouponBeanEntity>[] is M) {
      return data
          .map<UsableCouponBeanEntity>(
              (Map<String, dynamic> e) => UsableCouponBeanEntity.fromJson(e))
          .toList() as M;
    }
    if (<UsableCouponBeanData>[] is M) {
      return data
          .map<UsableCouponBeanData>(
              (Map<String, dynamic> e) => UsableCouponBeanData.fromJson(e))
          .toList() as M;
    }
    if (<UsableCouponBeanDataYouhuiquan>[] is M) {
      return data
          .map<UsableCouponBeanDataYouhuiquan>((Map<String, dynamic> e) =>
              UsableCouponBeanDataYouhuiquan.fromJson(e))
          .toList() as M;
    }
    if (<VIPRuleListData>[] is M) {
      return data
          .map<VIPRuleListData>(
              (Map<String, dynamic> e) => VIPRuleListData.fromJson(e))
          .toList() as M;
    }
    if (<VIPRuleData>[] is M) {
      return data
          .map<VIPRuleData>((Map<String, dynamic> e) => VIPRuleData.fromJson(e))
          .toList() as M;
    }

    if (<VIPInfoData>[] is M) {
      return data
          .map<VIPInfoData>((Map<String, dynamic> e) => VIPInfoData.fromJson(e))
          .toList() as M;
    }
    if (<VIPInfoObjectData>[] is M) {
      return data
          .map<VIPInfoObjectData>(
              (Map<String, dynamic> e) => VIPInfoObjectData.fromJson(e))
          .toList() as M;
    }
    if (<VIPGradeinfoData>[] is M) {
      return data
          .map<VIPGradeinfoData>(
              (Map<String, dynamic> e) => VIPGradeinfoData.fromJson(e))
          .toList() as M;
    }
    if (<VIPLevelcurData>[] is M) {
      return data
          .map<VIPLevelcurData>(
              (Map<String, dynamic> e) => VIPLevelcurData.fromJson(e))
          .toList() as M;
    }
    if (<VIPLevelnextData>[] is M) {
      return data
          .map<VIPLevelnextData>(
              (Map<String, dynamic> e) => VIPLevelnextData.fromJson(e))
          .toList() as M;
    }
    if (<VIPPointConfigData>[] is M) {
      return data
          .map<VIPPointConfigData>(
              (Map<String, dynamic> e) => VIPPointConfigData.fromJson(e))
          .toList() as M;
    }

    if (<PointInfoData>[] is M) {
      return data
          .map<PointInfoData>(
            (Map<String, dynamic> e) => PointInfoData.fromJson(e),
          )
          .toList() as M;
    }
    if (<PointInfoPageData>[] is M) {
      return data
          .map<PointInfoPageData>(
            (Map<String, dynamic> e) => PointInfoPageData.fromJson(e),
          )
          .toList() as M;
    }
    if (<PointInfoListData>[] is M) {
      return data
          .map<PointInfoListData>(
            (Map<String, dynamic> e) => PointInfoListData.fromJson(e),
          )
          .toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AreaListBeanEntity).toString(): AreaListBeanEntity.fromJson,
    (AreaListBeanData).toString(): AreaListBeanData.fromJson,
    (AreaListBeanDataAreas).toString(): AreaListBeanDataAreas.fromJson,
    (CityNodeBeanEntity).toString(): CityNodeBeanEntity.fromJson,
    (CityNodeBeanData).toString(): CityNodeBeanData.fromJson,
    (CouponListBeanEntity).toString(): CouponListBeanEntity.fromJson,
    (CouponListBeanData).toString(): CouponListBeanData.fromJson,
    (CouponListBeanDataData).toString(): CouponListBeanDataData.fromJson,
    (OrderMemberListBeanEntity).toString(): OrderMemberListBeanEntity.fromJson,
    (OrderMemberListBeanData).toString(): OrderMemberListBeanData.fromJson,
    (OrderMemberListBeanDataList).toString():
        OrderMemberListBeanDataList.fromJson,
    (OrderMemberListBeanDataListData).toString():
        OrderMemberListBeanDataListData.fromJson,
    (ProductNodeListEntity).toString(): ProductNodeListEntity.fromJson,
    (ProductNodeListData).toString(): ProductNodeListData.fromJson,
    (ProductNodeListDataNode).toString(): ProductNodeListDataNode.fromJson,
    (ProductNodeListDataNodeChilder).toString():
        ProductNodeListDataNodeChilder.fromJson,
    (ProductProvinceListBeanEntity).toString():
        ProductProvinceListBeanEntity.fromJson,
    (ProductProvinceListBeanData).toString():
        ProductProvinceListBeanData.fromJson,
    (ProductProvinceListBeanDataAreas).toString():
        ProductProvinceListBeanDataAreas.fromJson,
    (ProductTypeBeanEntity).toString(): ProductTypeBeanEntity.fromJson,
    (ProductTypeBeanData).toString(): ProductTypeBeanData.fromJson,
    (ProductTypeBeanDataTypes).toString(): ProductTypeBeanDataTypes.fromJson,
    (ProductTypeBeanDataTypesUrl).toString():
        ProductTypeBeanDataTypesUrl.fromJson,
    (ServerInfoBeanEntity).toString(): ServerInfoBeanEntity.fromJson,
    (ServerInfoBeanData).toString(): ServerInfoBeanData.fromJson,
    (ServerListBeanEntity).toString(): ServerListBeanEntity.fromJson,
    (ServerListBeanData).toString(): ServerListBeanData.fromJson,
    (ServerListBeanDataData).toString(): ServerListBeanDataData.fromJson,
    (StaticNodeListEntity).toString(): StaticNodeListEntity.fromJson,
    (StaticNodeListData).toString(): StaticNodeListData.fromJson,
    (StaticNodeListDataNode).toString(): StaticNodeListDataNode.fromJson,
    (StaticNodeListDataNodeChilder).toString():
        StaticNodeListDataNodeChilder.fromJson,
    (UsableCouponBeanEntity).toString(): UsableCouponBeanEntity.fromJson,
    (UsableCouponBeanData).toString(): UsableCouponBeanData.fromJson,
    (UsableCouponBeanDataYouhuiquan).toString():
        UsableCouponBeanDataYouhuiquan.fromJson,
    (VIPRuleListData).toString(): VIPRuleListData.fromJson,
    (VIPRuleData).toString(): VIPRuleData.fromJson,
    (VIPInfoData).toString(): VIPInfoData.fromJson,
    (VIPInfoObjectData).toString(): VIPInfoObjectData.fromJson,
    (VIPGradeinfoData).toString(): VIPGradeinfoData.fromJson,
    (VIPLevelcurData).toString(): VIPLevelcurData.fromJson,
    (VIPLevelnextData).toString(): VIPLevelnextData.fromJson,
    (VIPPointConfigData).toString(): VIPPointConfigData.fromJson,
    (PointInfoData).toString(): PointInfoData.fromJson,
    (PointInfoPageData).toString(): PointInfoPageData.fromJson,
    (PointInfoListData).toString(): PointInfoListData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
